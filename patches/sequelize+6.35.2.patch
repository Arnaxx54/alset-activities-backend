diff --git a/node_modules/sequelize/lib/sequelize.js b/node_modules/sequelize/lib/sequelize.js
index 0db3f01..2ecbac0 100644
--- a/node_modules/sequelize/lib/sequelize.js
+++ b/node_modules/sequelize/lib/sequelize.js
@@ -48,15 +48,29 @@ const { injectReplacements } = require("./utils/sql");
 class Sequelize {
   constructor(database, username, password, options) {
     let config;
-    if (arguments.length === 1 && typeof database === "object") {
+
+    if (arguments.length === 1 && typeof database === 'object') {
+      // new Sequelize({ ... options })
       options = database;
-      config = _.pick(options, "host", "port", "database", "username", "password");
-    } else if (arguments.length === 1 && typeof database === "string" || arguments.length === 2 && typeof username === "object") {
+      config = _.pick(options, 'host', 'port', 'database', 'username', 'password');
+    } else if (
+      (arguments.length === 1 && typeof database === 'string') ||
+      (arguments.length === 2 && typeof username === 'object')
+    ) {
+      // new Sequelize(URI, { ... options })   <--this was already commented out
+
       config = {};
       options = username || {};
+
+      // url.parse wants to access the object like an array, however, first item is always undefined and it 
+      // needs to access the use_env_variable, which is attached to username argument
+     // const urlParts = url.parse(options.use_env_variable, true);
+
       const urlParts = url.parse(arguments[0], true);
-      options.dialect = urlParts.protocol.replace(/:$/, "");
+
+      options.dialect = urlParts.protocol.replace(/:$/, '');
       options.host = urlParts.hostname;
+      
       if (options.dialect === "sqlite" && urlParts.pathname && !urlParts.pathname.startsWith("/:memory")) {
         const storagePath = path.join(options.host, urlParts.pathname);
         options.storage = path.resolve(options.storage || storagePath);
